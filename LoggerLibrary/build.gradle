apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    resourcePrefix "lazy-logger"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 2
        versionName "1.0.1"
    }
    buildTypes {
        release {
            //zipAlign优化
            zipAlignEnabled true
            //是否混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'lazy-logger'

    publishedGroupId = 'com.robin.lazy.logger'
    libraryName = 'LazyLogger'
    artifact = 'lazy-logger'

    libraryDescription = 'this is a android logger library'

    siteUrl = 'https://github.com/Robin-jiangyufeng/LazyLogger'
    gitUrl = 'https://github.com/Robin-jiangyufeng/LazyLogger.git'

    libraryVersion = '1.0.1'

    developerId = 'jiangyufeng'
    developerName = 'jiangyufeng'
    developerEmail = '13319406358@163.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

def siteUrl= ext.siteUrl
def gitUrl = ext.gitUrl

version = ext.libraryVersion
group = ext.publishedGroupId

//打包模块,在上传到jcenter时(执行gradle bintrayUpload命)需要删除此模块
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//    classpath += project.files(ext.androidJar)
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

//配置上传Bintray相关信息
bintray {
    //读取Bintray帐号和密码。
    //一般的为了保密和安全性，在项目的local.properties文件中添加两行句话即可：
    //bintray.user=username
    //bintray.apikey=apikey
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
//        publicDownloadNumbers = true
//        version {
//            desc = libraryDescription
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                //Optional. The passphrase for GPG signing'
//            }
//        }
    }
}

// 为注释中文提供解决方案
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}